/*
 * This file is generated by jOOQ.
*/
package cn.emac.demo.petstore.domain.tables;


import cn.emac.demo.petstore.domain.Jpetstore;
import cn.emac.demo.petstore.domain.Keys;
import cn.emac.demo.petstore.domain.tables.records.SupplierRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * Cadastro de Fornecedores
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Supplier extends TableImpl<SupplierRecord> {

    private static final long serialVersionUID = -1831493330;

    /**
     * The reference instance of <code>jpetstore.supplier</code>
     */
    public static final Supplier SUPPLIER = new Supplier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SupplierRecord> getRecordType() {
        return SupplierRecord.class;
    }

    /**
     * The column <code>jpetstore.supplier.suppid</code>.
     */
    public final TableField<SupplierRecord, Integer> SUPPID = createField("suppid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>jpetstore.supplier.name</code>.
     */
    public final TableField<SupplierRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(80), this, "");

    /**
     * The column <code>jpetstore.supplier.status</code>.
     */
    public final TableField<SupplierRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR.length(2).nullable(false), this, "");

    /**
     * The column <code>jpetstore.supplier.addr1</code>.
     */
    public final TableField<SupplierRecord, String> ADDR1 = createField("addr1", org.jooq.impl.SQLDataType.VARCHAR.length(80), this, "");

    /**
     * The column <code>jpetstore.supplier.addr2</code>.
     */
    public final TableField<SupplierRecord, String> ADDR2 = createField("addr2", org.jooq.impl.SQLDataType.VARCHAR.length(80), this, "");

    /**
     * The column <code>jpetstore.supplier.city</code>.
     */
    public final TableField<SupplierRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR.length(80), this, "");

    /**
     * The column <code>jpetstore.supplier.state</code>.
     */
    public final TableField<SupplierRecord, String> STATE = createField("state", org.jooq.impl.SQLDataType.VARCHAR.length(80), this, "");

    /**
     * The column <code>jpetstore.supplier.zip</code>.
     */
    public final TableField<SupplierRecord, String> ZIP = createField("zip", org.jooq.impl.SQLDataType.VARCHAR.length(5), this, "");

    /**
     * The column <code>jpetstore.supplier.phone</code>.
     */
    public final TableField<SupplierRecord, String> PHONE = createField("phone", org.jooq.impl.SQLDataType.VARCHAR.length(80), this, "");

    /**
     * Create a <code>jpetstore.supplier</code> table reference
     */
    public Supplier() {
        this("supplier", null);
    }

    /**
     * Create an aliased <code>jpetstore.supplier</code> table reference
     */
    public Supplier(String alias) {
        this(alias, SUPPLIER);
    }

    private Supplier(String alias, Table<SupplierRecord> aliased) {
        this(alias, aliased, null);
    }

    private Supplier(String alias, Table<SupplierRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "Cadastro de Fornecedores");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Jpetstore.JPETSTORE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<SupplierRecord> getPrimaryKey() {
        return Keys.KEY_SUPPLIER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<SupplierRecord>> getKeys() {
        return Arrays.<UniqueKey<SupplierRecord>>asList(Keys.KEY_SUPPLIER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Supplier as(String alias) {
        return new Supplier(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Supplier rename(String name) {
        return new Supplier(name, null);
    }
}
